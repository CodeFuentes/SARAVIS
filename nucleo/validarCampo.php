<?phprequire_once 'nucleo/vistaGestor.php';	final class validarCampo	{			const NINGUNO = '/./';		const ERROR_NINGUNO = '';				const ALFA = '/^[a-zA-Z]+$/';		const ERROR_ALFA = 'Solo admite letras';				const NUMERICO = '/^[0-9]+$/';		const ERROR_NUMERICO = 'Solo admite N&uacute;meros';				const ALFANUMERICO = '/^[a-zA-Z0-9]+$/';		const ERROR_ALFANUMERICO = 'Solo admite caracteres Alfanum&eacute;ricos';		const DECIMAL = '/^[0-9]+(\.?([0-9]{1,2}))?$/';		const ERROR_DECIMAL = 'Solo admite valores enteros';				const NOMBRE = '/^[a-zA-Z áéíóúñÁÉÍÓÚÑ]+$/';		const ERROR_NOMBRE = 'No se admiten n&uacute;meros o s&iacute;mbolos';				const RIF = '/^[JGVEPjgvep]{1}[-]{1}[0-9]{8}[-]{1}[0-9]{1}$/';		const ERROR_RIF = 'Ingrese un R.I.F correcto';				const IP = '/^(([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/';		const ERROR_IP = 'La direccion IP no cumple con el formato';				static function multiMarcado($llave, $mensaje, $minimo, array $campos)		{			$contador = 0;			$retorna = '';						foreach($campos as $individual)			{									if(isset($individual) and !empty($individual))				{					self::_agregarDiccionario('checked_' . $llave . "_" . $individual , 'checked');										$contador++;				}			}						if($contador < $minimo)			{								self::agregarError($llave, $mensaje);				$retorna .= 'ERROR';			}						return $retorna;		}				static public function validarFecha($variable, $llave, $vacio)		{			$retorna .= '';						if(($vacio == 'no' and !empty($variable)) or ($vacio == 'si' and !empty($variable)))			{							if(preg_match('/^\d{1,2}\-\d{1,2}\-\d{4}$/', $variable))				{					list($dia, $mes, $anio) = explode('-', $variable);										if(!checkdate ($mes, $dia , $anio))					{						self::agregarError($llave, 'Introduzca una fecha valida');						$retorna .= 'ERROR';					}				}				else				{					self::agregarError($llave, 'Introduzca una fecha valida');					$retorna .= 'ERROR';				}			}			elseif($vacio == 'no' and empty($variable))			{				self::agregarError($llave, 'Este campo es obligatorio');				$retorna .= 'ERROR';			}						return $retorna;		}						static public function validarSelect($variable, $llave, $vacio)		{			$retorna .= '';			if($vacio == 'no' and empty($variable) and $variable != 0)			{				self::agregarError($llave, 'Debe seleccionar una opci&oacute;n');				$retorna .= 'ERROR';			}			elseif(!empty($variable))			{				self::_agregarDiccionario('selected_' . $llave . '_' . $variable , 'selected');			}						return $retorna;		}						static public function validarDato(&$variable, $llave, $tipo, $vacio, $tamano, $transformacion = 'no')		{			$retorna = '';			$variable = trim($variable);			$variable = preg_replace('/\ {2,}/', ' ', $variable);						if(($vacio == 'no' and !empty($variable)) or ($vacio == 'si' and !empty($variable)))			{				if(self::_patron($variable, $tipo))				{					$retorna .= '';										$retorna .= self::_tamano($variable, $llave, $tamano);					$retorna .= self::_transformacion($variable, $transformacion);				}				else				{					self::_agregarErrorPatron($llave, $tipo);					$retorna .= 'ERROR';						}			}			elseif($vacio == 'no' and empty($variable))			{				self::agregarError($llave, 'Este campo es obligatorio');				$retorna .= 'ERROR';			}						return $retorna;		}		static private function _patron($variable, $tipo)		{			if(preg_match(constant('self::' . $tipo), $variable))			{				$retorna = TRUE;			}			else			{				$retorna = FALSE;			}							return $retorna;		}				static private function _tamano($variable, $llave, $parametros)		{			list($minimo, $maximo) = explode('-', $parametros);			if(empty($maximo))			{				$maximo = $minimo;			}						if(strlen($variable) >= $minimo AND strlen($variable) <= $maximo)			{					$retorna = '';			}			else			{				if($maximo == $minimo)				{					self::agregarError($llave, 'Debe tener ' . $minimo . ' caracteres');				}				else				{					self::agregarError($llave, 'Debe tener entre ' . $minimo . ' y ' . $maximo . ' caracteres');				}				$retorna = 'ERROR';			}						return $retorna;		}						static private function _transformacion(&$variable, $parametros)		{			switch($parametros)			{				case 'mayusculas':										$variable = strtoupper($variable);									break;								case 'minusculas':									$variable = strtolower($variable);									break;								case 'inicio':									$variable = strtolower($variable);					$variable = ucfirst($variable);									break;								case 'palabras':										$variable = strtolower($variable);					$variable = ucwords($variable);									break;								case 'ninguno':				case 'no':				break;								default:					exit('No transformacion de texto: mayusculas, minisculas, inicio, palabras, ninguno');				break;			}		}						static public function agregarError($llave, $mensaje)		{			vistaGestor::agregarErrorForm($llave, $mensaje);		}				static private function _agregarDiccionario($llave, $mensaje)		{			vistaGestor::agregarDiccionario($llave, $mensaje);		}				static private function _agregarErrorPatron($llave, $tipo)		{			vistaGestor::agregarErrorForm($llave,  constant('self::ERROR_' . $tipo));		}			}